<?xml version="1.0" encoding="UTF-8"?>
<project name="ohmage" default="help">

	<!-- The local.properties file is created and updated by the 'android' tool.
		 It contains the path to the SDK. It should *NOT* be checked into
		 Version Control Systems. -->
	<loadproperties srcFile="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by the
		 'android' tool to add properties to it.
		 This is the place to change some Ant specific build properties.
		 Here are some properties you may want to change/update:

		 source.dir
			 The name of the source directory. Default is 'src'.
		 out.dir
			 The name of the output directory. Default is 'bin'.

		 For other overridable properties, look at the beginning of the rules
		 files in the SDK, at tools/ant/build.xml

		 Properties related to the SDK location or the project target should
		 be updated using the 'android' tool with the 'update' action.

		 This file is an integral part of the build system for your
		 application and should be checked into Version Control Systems.

		 -->
	<property file="ant.properties" />

	<!-- The project.properties file is created and updated by the 'android'
		 tool, as well as ADT.

		 This contains project specific properties such as project target, and library
		 dependencies. Lower level build properties are stored in ant.properties
		 (or in .classpath for Eclipse projects).

		 This file is an integral part of the build system for your
		 application and should be checked into Version Control Systems. -->
	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->
	<fail
			message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
			unless="sdk.dir"
	/>

<!-- extension targets. Uncomment the ones where you want to do custom work
	 in between standard targets -->
<!--
	<target name="-pre-build">
	</target>
	<target name="-pre-compile">
	</target>

	/* This is typically used for code obfuscation.
	   Compiled code location: ${out.classes.absolute.dir}
	   If this is not done in place, override ${out.dex.input.absolute.dir} */
	<target name="-post-compile">
	</target>
-->

	<!-- ********** git specific targets ********** -->

	<target name="tag-release">
		<sequential>
			<git-checkout-local branch="cuttingedge" dir="." />
			<git-tag tagName="mdev-${manifest.versionName}-multi" dir="." />
			<git-checkout-local branch="NIH" dir="." />
			<git-tag tagName="mdev-${manifest.versionName}-NIH" dir="." />
			<git-checkout-local branch="NIH-release" dir="." />
			<git-tag tagName="pilots-${manifest.versionName}-NIH" dir="." />
			<git-checkout-local branch="internal-multi" dir="." />
			<git-tag tagName="internal-${manifest.versionName}-multi" dir="." />
			<git-checkout-local branch="internal-single" dir="." />
			<git-tag tagName="internal-${manifest.versionName}-single" dir="." />
		</sequential>
	</target>

	<!-- ********** cuttingedge specific targets ********** -->

	<target name="-checkout-cuttingedge">
		<git-checkout-local branch="cuttingedge" dir="." />
	</target>

	<target name="-set-files-cuttingedge" depends="-set-mode-check">
		<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-cuttingedge-unaligned.apk" />
		<set-output-file name="mdev-multi" />
	</target>

	<target name="cuttingedge" depends="-checkout-cuttingedge, -set-files-cuttingedge, -do-debug"
				description="Builds the application for cuttingedge">
		<record-build-info />
	</target>

	<!-- ********** NIH specific targets ********** -->

	<target name="-checkout-NIH">
		<git-checkout-local branch="NIH" dir="." />
	</target>

	<target name="-set-files-NIH" depends="-set-mode-check">
		<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-NIH-unaligned.apk" />
		<set-output-file name="mdev-NIH" />
	</target>

	<target name="NIH" depends="-checkout-NIH, -set-files-NIH, -do-debug"
				description="Builds the application for NIH">
		<record-build-info />
	</target>

	<!-- ********** NIH-release specific targets ********** -->

	<target name="-checkout-NIH-release">
		<git-checkout-local branch="NIH-release" dir="." />
	</target>

	<target name="-set-files-NIH-release" depends="-set-mode-check">
		<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-NIH-release-unaligned-SIGNED.apk" />
		<set-release-output-file name="pilots-NIH" />
	</target>

	<target name="NIH-release"
				depends="-checkout-NIH-release, -set-files-NIH-release, -set-release-mode, -release-obfuscation-check, -package, -release-prompt-for-password, -release-nosign"
				if="has.keystore"
				description="Builds the NIH-release application">
			<release />
	</target>

	<!-- ********** internal-multi specific targets ********** -->

	<target name="-checkout-internal-multi">
		<git-checkout-local branch="internal-multi" dir="." />
	</target>

	<target name="-set-files-internal-multi" depends="-set-mode-check">
		<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-internal-multi-unaligned-SIGNED.apk" />
		<set-release-output-file name="internal-multi" />
	</target>

	<target name="internal-multi"
				depends="-checkout-internal-multi, -set-files-internal-multi, -set-release-mode, -release-obfuscation-check, -package, -release-prompt-for-password, -release-nosign"
				if="has.keystore"
				description="Builds the internal-multi application">
			<release />
	</target>

	<!-- ********** internal-single specific targets ********** -->

	<target name="-checkout-internal-single">
		<git-checkout-local branch="internal-single" dir="." />
	</target>

	<target name="-set-files-internal-single" depends="-set-mode-check">
		<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-internal-single-unaligned-SIGNED.apk" />
		<set-release-output-file name="internal-single" />
	</target>

	<target name="internal-single"
				depends="-checkout-internal-single, -set-files-internal-single, -set-release-mode, -release-obfuscation-check, -package, -release-prompt-for-password, -release-nosign"
				if="has.keystore"
				description="Builds the internal-single application">
			<release />
	</target>

	<!-- Helper functions -->

	<macrodef name="release">
		<sequential>
			<do-only-if-not-library elseText="Library project: do not create apk..." >
				<sequential>
					<property name="out.unaligned.file" location="${out.absolute.dir}/${ant.project.name}-release-unaligned.apk" />

					<!-- Signs the APK -->
					<echo>Signing final apk...</echo>
					<signjar
							jar="${out.packaged.file}"
							signedjar="${out.unaligned.file}"
							keystore="${key.store}"
							storepass="${key.store.password}"
							alias="${key.alias}"
							keypass="${key.alias.password}"
							verbose="${verbose}" />

					<!-- Zip aligns the APK -->
					<zipalign-helper in.package="${out.unaligned.file}"
											   out.package="${out.final.file}" />
					<echo>Release Package: ${out.final.file}</echo>
				</sequential>
			</do-only-if-not-library>
			<record-build-info />
		</sequential>
	</macrodef>

	<macrodef name="set-output-file">
		<attribute name="name" />
		<sequential>
			<property name="out.final.file" location="${out.absolute.dir}/${ant.project.name}-${manifest.versionName}-@{name}-${manifest.versionCode}.apk" />
		</sequential>
	</macrodef>

	<macrodef name="set-release-output-file">
		<attribute name="name" />
		<sequential>
			<property name="out.final.file" location="${out.absolute.dir}/${ant.project.name}-${manifest.versionName}-@{name}-${manifest.versionCode}-SIGNED.apk" />
		</sequential>
	</macrodef>

	<!-- version-tag: custom -->
	<import file="${sdk.dir}/tools/ant/build.xml" />

	<xpath input="AndroidManifest.xml" expression="/manifest/@android:versionCode"
			output="manifest.versionCode" />

	<xpath input="AndroidManifest.xml" expression="/manifest/@android:versionName"
			output="manifest.versionName" />

	<import file="git-build.xml" />
</project>
